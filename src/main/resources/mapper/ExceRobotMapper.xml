<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.atmatrix.abr.infrastructure.dao.ExceRobotMapper">
    <resultMap id="BaseResultMap" type="com.atmatrix.abr.infrastructure.entity.ExceRobot">
        <result column="id" jdbcType="INTEGER" property="id"/>
        <result column="robot_union_code" jdbcType="VARCHAR" property="robotUnionCode"/>
        <result column="exception_union_code" jdbcType="VARCHAR" property="exceptionUnionCode"/>
        <result column="exception_type_name" jdbcType="VARCHAR" property="exceptionTypeName"/>
        <result column="analysis" jdbcType="VARCHAR" property="analysis"/>
        <result column="exception_time" jdbcType="TIMESTAMP" property="exceptionTime"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
    </resultMap>
    <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs"
               type="com.atmatrix.abr.infrastructure.entity.ExceRobotWithBLOBs">
        <result column="reason" jdbcType="LONGVARCHAR" property="reason"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
    id, robot_union_code, exception_union_code, exception_type_name, analysis, exception_time, 
    create_time, update_time
  </sql>
    <sql id="Blob_Column_List">
    reason
  </sql>
    <select id="selectByExampleWithBLOBs" parameterType="com.atmatrix.abr.infrastructure.entity.ExceRobotExample"
            resultMap="ResultMapWithBLOBs">
        select
        <if test="distinct">
            distinct
        </if>
        'true' as QUERYID,
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from exce_robot
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByExample" parameterType="com.atmatrix.abr.infrastructure.entity.ExceRobotExample"
            resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        'true' as QUERYID,
        <include refid="Base_Column_List"/>
        from exce_robot
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <delete id="deleteByExample" parameterType="com.atmatrix.abr.infrastructure.entity.ExceRobotExample">
        delete from exce_robot
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="com.atmatrix.abr.infrastructure.entity.ExceRobotWithBLOBs">
    insert into exce_robot (
      robot_union_code,
      exception_union_code,
      exception_type_name,
      reason,
      analysis,
      exception_time,
      `delete`,
      create_time,
      update_time
      )
    values (
      #{robotUnionCode,jdbcType=VARCHAR},
      #{exceptionUnionCode,jdbcType=VARCHAR},
      #{exceptionTypeName,jdbcType=VARCHAR},
      #{reason,jdbcType=VARCHAR},
      #{analysis,jdbcType=VARCHAR},
      #{exceptionTime,jdbcType=TIMESTAMP},
      #{delete,jdbcType=INTEGER},
      now(),
      now()
      )
  </insert>
    <insert id="insertSelective" parameterType="com.atmatrix.abr.infrastructure.entity.ExceRobotWithBLOBs">
        insert into exce_robot
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="robotUnionCode != null">
                robot_union_code,
            </if>
            <if test="exceptionUnionCode != null">
                exception_union_code,
            </if>
            <if test="exceptionTypeName != null">
                exception_type_name,
            </if>
            <if test="reason != null">
                reason,
            </if>
            <if test="analysis != null">
                analysis,
            </if>
            <if test="exceptionTime != null">
                exception_time,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
            <if test="reason != null">
                reason,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="robotUnionCode != null">
                #{robotUnionCode,jdbcType=VARCHAR},
            </if>
            <if test="exceptionUnionCode != null">
                #{exceptionUnionCode,jdbcType=VARCHAR},
            </if>
            <if test="exceptionTypeName != null">
                #{exceptionTypeName,jdbcType=VARCHAR},
            </if>
            <if test="reason != null">
                #{reason,jdbcType=VARCHAR},
            </if>
            <if test="analysis != null">
                #{analysis,jdbcType=VARCHAR},
            </if>
            <if test="exceptionTime != null">
                #{exceptionTime,jdbcType=TIMESTAMP},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="reason != null">
                #{reason,jdbcType=LONGVARCHAR},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.atmatrix.abr.infrastructure.entity.ExceRobotExample"
            resultType="java.lang.Long">
        select count(*) from exce_robot
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>


    <update id="updateByExampleSelective" parameterType="map">
        update exce_robot
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=INTEGER},
            </if>
            <if test="record.robotUnionCode != null">
                robot_union_code = #{record.robotUnionCode,jdbcType=VARCHAR},
            </if>
            <if test="record.exceptionUnionCode != null">
                exception_union_code = #{record.exceptionUnionCode,jdbcType=VARCHAR},
            </if>
            <if test="record.exceptionTypeName != null">
                exception_type_name = #{record.exceptionTypeName,jdbcType=VARCHAR},
            </if>
            <if test="record.analysis != null">
                analysis = #{record.analysis,jdbcType=VARCHAR},
            </if>
            <if test="record.exceptionTime != null">
                exception_time = #{record.exceptionTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.createTime != null">
                create_time = #{record.createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.updateTime != null">
                update_time = #{record.updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.reason != null">
                reason = #{record.reason,jdbcType=LONGVARCHAR},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExampleWithBLOBs" parameterType="map">
        update exce_robot
        set
        id = #{record.id,jdbcType=INTEGER},
        robot_union_code = #{record.robotUnionCode,jdbcType=VARCHAR},
        exception_union_code = #{record.exceptionUnionCode,jdbcType=VARCHAR},
        exception_type_name = #{record.exceptionTypeName,jdbcType=VARCHAR},
        analysis = #{record.analysis,jdbcType=VARCHAR},
        exception_time = #{record.exceptionTime,jdbcType=TIMESTAMP},
        reason = #{record.reason,jdbcType=LONGVARCHAR}
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update exce_robot
        set id = #{record.id,jdbcType=INTEGER},
        robot_union_code = #{record.robotUnionCode,jdbcType=VARCHAR},
        exception_union_code = #{record.exceptionUnionCode,jdbcType=VARCHAR},
        exception_type_name = #{record.exceptionTypeName,jdbcType=VARCHAR},
        analysis = #{record.analysis,jdbcType=VARCHAR},
        exception_time = #{record.exceptionTime,jdbcType=TIMESTAMP},
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
        update_time = #{record.updateTime,jdbcType=TIMESTAMP}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>

    <select id="queryExceRobotAmountByWorkType" resultType="java.util.Map">
        select rd.`work_type` as workType, count(1) as amount
        from exce_robot as er
        inner join robot_detail rd on rd.robot_union_code = er.robot_union_code
        where
        rd.`rent_status_code` = #{rentStatusCode}
        and er.`delete` = 1
        group by workType
  </select>
</mapper>

