<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.atmatrix.abr.infrastructure.dao.ContractRentMapper">
    <resultMap id="BaseResultMap" type="com.atmatrix.abr.infrastructure.entity.ContractRent">
        <result column="id" jdbcType="INTEGER" property="id"/>
        <result column="union_code" jdbcType="VARCHAR" property="unionCode"/>
        <result column="robot_union_code" jdbcType="VARCHAR" property="robotUnionCode"/>
        <result column="rent_address" jdbcType="VARCHAR" property="rentAddress"/>
        <result column="robot_address" jdbcType="VARCHAR" property="robotAddress"/>
        <result column="billing_price" jdbcType="INTEGER" property="billingPrice"/>
        <result column="billing_price_unit" jdbcType="VARCHAR" property="billingPriceUnit"/>
        <result column="billing_type" jdbcType="VARCHAR" property="billingType"/>
        <result column="billing_overdraft" jdbcType="INTEGER" property="billingOverdraft"/>
        <result column="user_union_code" jdbcType="VARCHAR" property="userUnionCode"/>
        <result column="user_contact" jdbcType="VARCHAR" property="userContact"/>
        <result column="user_name" jdbcType="VARCHAR" property="userName"/>
        <result column="total_price" jdbcType="INTEGER" property="totalPrice"/>
        <result column="contract_status" jdbcType="INTEGER" property="contractStatus"/>
        <result column="delete" jdbcType="INTEGER" property="delete"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
        `id`,
        `union_code`,
        `robot_union_code`,
        `rent_address`,
        `robot_address`,
        `billing_price`,
        `billing_price_unit`,
        `billing_type`,
        `billing_overdraft`,
        `user_union_code`,
        `user_contact`,
        `user_name`,
        `total_price`,
        `contract_status`,
        `create_time`,
        `update_time`
    </sql>
    <select id="selectByExample" parameterType="com.atmatrix.abr.infrastructure.entity.ContractRentExample"
            resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        'true' as QUERYID,
        <include refid="Base_Column_List"/>
        from contract_rent
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <delete id="deleteByExample" parameterType="com.atmatrix.abr.infrastructure.entity.ContractRentExample">
        delete from contract_rent
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" useGeneratedKeys="true" keyProperty="id"  parameterType="com.atmatrix.abr.infrastructure.entity.ContractRent">
    insert into contract_rent (
        `union_code`,
        `robot_union_code`,
        `rent_address`,
        `robot_address`,
        `billing_price`,
        `billing_price_unit`,
        `billing_type`,
        `billing_overdraft`,
        `user_union_code`,
        `user_contact`,
        `user_name`,
        `total_price`,
        `contract_status`,
        `create_time`,
        `update_time`
    )
    values (
      #{unionCode,jdbcType=VARCHAR},
      #{robotUnionCode,jdbcType=VARCHAR},
      #{rentAddress,jdbcType=VARCHAR},
      #{robotAddress,jdbcType=VARCHAR},
      #{billingPrice,jdbcType=INTEGER},
      #{billingPriceUnit,jdbcType=VARCHAR},
      #{billingType,jdbcType=VARCHAR},
      #{billingOverdraft,jdbcType=INTEGER},
      #{userUnionCode,jdbcType=VARCHAR},
      #{userContact,jdbcType=VARCHAR},
      #{userName,jdbcType=VARCHAR},
      #{totalPrice,jdbcType=INTEGER},
      #{contractStatus,jdbcType=INTEGER},
      now(),
      now()
      )
  </insert>
    <insert id="insertSelective" parameterType="com.atmatrix.abr.infrastructure.entity.ContractRent">
        insert into contract_rent
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="unionCode != null">
                union_code,
            </if>
            <if test="robotUnionCode != null">
                robot_union_code,
            </if>
            <if test="rentAddress != null">
                rent_address,
            </if>
            <if test="robotAddress != null">
                robot_address,
            </if>
            <if test="billingPrice != null">
                billing_price,
            </if>
            <if test="billingPriceUnit != null">
                billing_price_unit,
            </if>
            <if test="billingType != null">
                billing_type,
            </if>
            <if test="billingOverdraft != null">
                billing_overdraft,
            </if>
            <if test="userUnionCode != null">
                user_union_code,
            </if>
            <if test="userContact != null">
                user_contact,
            </if>
            <if test="userName != null">
                user_name,
            </if>
            <if test="totalPrice != null">
                total_price,
            </if>
            <if test="contractStatus != null">
                contract_status,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="unionCode != null">
                #{unionCode,jdbcType=VARCHAR},
            </if>
            <if test="robotUnionCode != null">
                #{robotUnionCode,jdbcType=VARCHAR},
            </if>
            <if test="rentAddress != null">
                #{rentAddress,jdbcType=VARCHAR},
            </if>
            <if test="robotAddress != null">
                #{robotAddress,jdbcType=VARCHAR},
            </if>
            <if test="billingPrice != null">
                #{billingPrice,jdbcType=DECIMAL},
            </if>
            <if test="billingPriceUnit != null">
                #{billingPriceUnit,jdbcType=VARCHAR},
            </if>
            <if test="billingType != null">
                #{billingType,jdbcType=VARCHAR},
            </if>
            <if test="billingOverdraft != null">
                #{billingOverdraft,jdbcType=INTEGER},
            </if>
            <if test="userUnionCode != null">
                #{userUnionCode,jdbcType=VARCHAR},
            </if>
            <if test="userContact != null">
                #{userContact,jdbcType=VARCHAR},
            </if>
            <if test="userName != null">
                #{userName,jdbcType=VARCHAR},
            </if>
            <if test="totalPrice != null">
                #{totalPrice,jdbcType=INTEGER},
            </if>
            <if test="contractStatus != null">
                #{contractStatus,jdbcType=INTEGER},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                #{updateTime,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.atmatrix.abr.infrastructure.entity.ContractRentExample"
            resultType="java.lang.Long">
        select count(*) from contract_rent
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update contract_rent
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=INTEGER},
            </if>
            <if test="record.unionCode != null">
                union_code = #{record.unionCode,jdbcType=VARCHAR},
            </if>
            <if test="record.robotUnionCode != null">
                robot_union_code = #{record.robotUnionCode,jdbcType=VARCHAR},
            </if>
            <if test="record.rentAddress != null">
                rent_address = #{record.rentAddress,jdbcType=VARCHAR},
            </if>
            <if test="record.robotAddress != null">
                robot_address = #{record.robotAddress,jdbcType=VARCHAR},
            </if>
            <if test="record.billingPrice != null">
                billing_price = #{record.billingPrice,jdbcType=INTEGER},
            </if>
            <if test="record.billingPriceUnit != null">
                billing_price_unit = #{record.billingPriceUnit,jdbcType=VARCHAR},
            </if>
            <if test="record.billingType != null">
                billing_type = #{record.billingType,jdbcType=VARCHAR},
            </if>
            <if test="record.billingOverdraft != null">
                billing_overdraft = #{record.billingOverdraft,jdbcType=INTEGER},
            </if>
            <if test="record.userUnionCode != null">
                user_union_code = #{record.userUnionCode,jdbcType=VARCHAR},
            </if>
            <if test="record.userContact != null">
                user_contact = #{record.userContact,jdbcType=VARCHAR},
            </if>
            <if test="record.userName != null">
                user_name = #{record.userName,jdbcType=VARCHAR},
            </if>
            <if test="record.totalPrice != null">
                total_price = #{record.totalPrice,jdbcType=INTEGER},
            </if>
            <if test="record.contractStatus != null">
                contract_status = #{record.contractStatus,jdbcType=INTEGER},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update contract_rent
        set
        `union_code` = #{record.unionCode,jdbcType=VARCHAR},
        `robot_union_code` = #{record.robotUnionCode,jdbcType=VARCHAR},
        `rent_address` = #{record.rentAddress,jdbcType=VARCHAR},
        `robot_address` = #{record.robotAddress,jdbcType=VARCHAR},
        `billing_price` = #{record.billingPrice,jdbcType=INTEGER},
        `billing_price_unit` = #{record.billingPriceUnit,jdbcType=VARCHAR},
        `billing_type` = #{record.billingType,jdbcType=VARCHAR},
        `billing_overdraft` = #{record.billingOverdraft,jdbcType=INTEGER},
        `user_union_code` = #{record.userUnionCode,jdbcType=VARCHAR},
        `user_contact` = #{record.userContact,jdbcType=VARCHAR},
        `user_name`= #{record.userName,jdbcType=VARCHAR},
        `total_price` = #{record.totalPrice,jdbcType=INTEGER},
        `contract_status` = #{record.contractStatus,jdbcType=INTEGER},
        `create_time` = #{record.createTime,jdbcType=TIMESTAMP},
        `update_time` = #{record.updateTime,jdbcType=TIMESTAMP}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
</mapper>