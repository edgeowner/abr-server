<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.atmatrix.abr.infrastructure.dao.RobotDictionaryMapper">
    <resultMap id="BaseResultMap" type="com.atmatrix.abr.infrastructure.entity.RobotDictionary">
        <result column="id" jdbcType="INTEGER" property="id"/>
        <result column="type" jdbcType="VARCHAR" property="type"/>
        <result column="code" jdbcType="VARCHAR" property="code"/>
        <result column="name" jdbcType="VARCHAR" property="name"/>
        <result column="parent_code" jdbcType="VARCHAR" property="parentCode"/>
        <result column="parent_name" jdbcType="VARCHAR" property="parentName"/>
        <result column="level" jdbcType="INTEGER" property="level"/>
        <result column="show_status" jdbcType="INTEGER" property="showStatus"/>
        <result column="sort" jdbcType="INTEGER" property="sort"/>
        <result column="delete" jdbcType="INTEGER" property="delete"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
    `id`, `type`, `code`, `name`, `parent_code`, `parent_name`, `level`, `show_status`, `sort`, `delete`,
    `create_time`, `update_time`
  </sql>
    <select id="selectByExample" parameterType="com.atmatrix.abr.infrastructure.entity.RobotDictionaryExample"
            resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        'true' as QUERYID,
        <include refid="Base_Column_List"/>
        from robot_dictionary
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <delete id="deleteByExample" parameterType="com.atmatrix.abr.infrastructure.entity.RobotDictionaryExample">
        delete from robot_dictionary
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="com.atmatrix.abr.infrastructure.entity.RobotDictionary">
    insert into robot_dictionary (id, type, code, 
      name, parent_code, parent_name, 
      level, show_status, sort, 
      delete, create_time, update_time
      )
    values (#{id,jdbcType=INTEGER}, #{type,jdbcType=VARCHAR}, #{code,jdbcType=VARCHAR}, 
      #{name,jdbcType=VARCHAR}, #{parentCode,jdbcType=VARCHAR}, #{parentName,jdbcType=VARCHAR}, 
      #{level,jdbcType=INTEGER}, #{showStatus,jdbcType=INTEGER}, #{sort,jdbcType=INTEGER}, 
      #{delete,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}
      )
  </insert>
    <insert id="insertSelective" parameterType="com.atmatrix.abr.infrastructure.entity.RobotDictionary">
        insert into robot_dictionary
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="type != null">
                type,
            </if>
            <if test="code != null">
                code,
            </if>
            <if test="name != null">
                name,
            </if>
            <if test="parentCode != null">
                parent_code,
            </if>
            <if test="parentName != null">
                parent_name,
            </if>
            <if test="level != null">
                level,
            </if>
            <if test="showStatus != null">
                show_status,
            </if>
            <if test="sort != null">
                sort,
            </if>
            <if test="delete != null">
                delete,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="type != null">
                #{type,jdbcType=VARCHAR},
            </if>
            <if test="code != null">
                #{code,jdbcType=VARCHAR},
            </if>
            <if test="name != null">
                #{name,jdbcType=VARCHAR},
            </if>
            <if test="parentCode != null">
                #{parentCode,jdbcType=VARCHAR},
            </if>
            <if test="parentName != null">
                #{parentName,jdbcType=VARCHAR},
            </if>
            <if test="level != null">
                #{level,jdbcType=INTEGER},
            </if>
            <if test="showStatus != null">
                #{showStatus,jdbcType=INTEGER},
            </if>
            <if test="sort != null">
                #{sort,jdbcType=INTEGER},
            </if>
            <if test="delete != null">
                #{delete,jdbcType=INTEGER},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                #{updateTime,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>

    <select id="countByExample" parameterType="com.atmatrix.abr.infrastructure.entity.RobotDictionaryExample"
            resultType="java.lang.Long">
        select count(*) from robot_dictionary
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update robot_dictionary
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=INTEGER},
            </if>
            <if test="record.type != null">
                type = #{record.type,jdbcType=VARCHAR},
            </if>
            <if test="record.code != null">
                code = #{record.code,jdbcType=VARCHAR},
            </if>
            <if test="record.name != null">
                name = #{record.name,jdbcType=VARCHAR},
            </if>
            <if test="record.parentCode != null">
                parent_code = #{record.parentCode,jdbcType=VARCHAR},
            </if>
            <if test="record.parentName != null">
                parent_name = #{record.parentName,jdbcType=VARCHAR},
            </if>
            <if test="record.level != null">
                level = #{record.level,jdbcType=INTEGER},
            </if>
            <if test="record.showStatus != null">
                show_status = #{record.showStatus,jdbcType=INTEGER},
            </if>
            <if test="record.sort != null">
                sort = #{record.sort,jdbcType=INTEGER},
            </if>
            <if test="record.delete != null">
                delete = #{record.delete,jdbcType=INTEGER},
            </if>
            <if test="record.createTime != null">
                create_time = #{record.createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.updateTime != null">
                update_time = #{record.updateTime,jdbcType=TIMESTAMP},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update robot_dictionary
        set id = #{record.id,jdbcType=INTEGER},
        type = #{record.type,jdbcType=VARCHAR},
        code = #{record.code,jdbcType=VARCHAR},
        name = #{record.name,jdbcType=VARCHAR},
        parent_code = #{record.parentCode,jdbcType=VARCHAR},
        parent_name = #{record.parentName,jdbcType=VARCHAR},
        level = #{record.level,jdbcType=INTEGER},
        show_status = #{record.showStatus,jdbcType=INTEGER},
        sort = #{record.sort,jdbcType=INTEGER},
        delete = #{record.delete,jdbcType=INTEGER},
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
        update_time = #{record.updateTime,jdbcType=TIMESTAMP}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>


    <select id="getAll" resultType="com.atmatrix.abr.infrastructure.entity.RobotDictionary">
        select
        <include refid="Base_Column_List"/>
        from robot_dictionary
        where `delete` = 1
    </select>


    <select id="getListByTypes" resultType="com.atmatrix.abr.infrastructure.entity.RobotDictionary">
        select
        <include refid="Base_Column_List"/>
        from robot_dictionary
        where `type` in
        <foreach collection="list" open="(" item="item" close=")" separator=",">
            #{item}
        </foreach>
        and `delete` = 1
    </select>
    <select id="getListByType" resultType="com.atmatrix.abr.infrastructure.entity.RobotDictionary">
        select
        <include refid="Base_Column_List"/>
        from robot_dictionary
        where `type`= #{type}
        and `delete` = 1
    </select>


    <select id="getBillingTypeList" resultType="com.atmatrix.abr.mgt.dto.BillingTypeDto">
        select
        rd.code as code,
        rd.name as name
        from robot_dictionary as rd
        where rd.type = 'billing'
        and rd.sort != 0
        and rd.delete = 1
    </select>


    <insert id="batchInsert" useGeneratedKeys="true" keyProperty="id" parameterType="arraylist">
        insert into robot_dictionary (
        `type`,
        `code`,
        `name`,
        `parent_code`,
        `parent_name`,
        `level`,
        `show_status`,
        `sort`,
        `delete`,
        `create_time`,
        `update_time`
        ) values
        <foreach collection="list" item="item" index="index" separator=",">
            (
            #{item.type,jdbcType=VARCHAR},
            #{item.code,jdbcType=VARCHAR},
            #{item.name,jdbcType=VARCHAR},
            #{item.parentCode,jdbcType=VARCHAR},
            #{item.parentName,jdbcType=VARCHAR},
            #{item.level,jdbcType=INTEGER},
            #{item.showStatus,jdbcType=INTEGER},
            #{item.sort,jdbcType=INTEGER},
            #{item.delete,jdbcType=INTEGER},
            now(),
            now()
            )
        </foreach>
    </insert>
</mapper>